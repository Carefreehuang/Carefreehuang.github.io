<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>匹配下标-KMP算法</title>
    <link href="/2023/09/25/%E5%8C%B9%E9%85%8D%E4%B8%8B%E6%A0%87-KMP%E7%AE%97%E6%B3%95/"/>
    <url>/2023/09/25/%E5%8C%B9%E9%85%8D%E4%B8%8B%E6%A0%87-KMP%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<hr><p>前言：尽管之前大二学数据结构我就学过kmp，但是由于这个算法比较复杂，并且自己划水一年，所以基本上是新学差不多，今天花了接近三个小时，重新梳理一下kmp的思路，以及注意事项。</p><p>题目链接：<a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28. 找出字符串中第一个匹配项的下标</a></p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="核心思路："><a href="#核心思路：" class="headerlink" title="核心思路："></a>核心思路：</h4><ol><li>根据前后缀来进行快速匹配，使得不需要使用两个for循环来进行匹配，如图 <img src="https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B21.gif" alt="使用前后缀匹配" title="Magic Gardens"></li><li>如何进行匹配呢，我们借助next数组，next数组是一个和字串长度相等的int数组，相应的存储以该节点为后缀的最大公共前后缀长度，什么是公共前后缀呢？例如：aabaa字串的公共前后缀就是a,aa，所以其最大长度为2。</li><li>那么next数组如何发挥作用呢，我们依次匹配串，当有冲突时，我们利用next进行回溯，回溯到的位置就是 next[冲突位置索引-1] ，为什么呢，我们可以举一个例子，比如 串 a a b a a f，对应的next数组为0 1 0 1 2 0，当父串为：a a b a a b a a f,我们可以知道当匹配到父串的第二个b时会有冲突，所以回溯，根据next，父串指针不动，字串指针回溯到next[indexOf(‘f’)-1]即2，所以我们再次从子串的第一个b开始匹配。</li></ol><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next,String s)</span>&#123;<br>    <span class="hljs-comment">//初始化 j 以及 next数组</span><br>    <span class="hljs-comment">//i：后缀末尾   j：前缀末尾</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    next[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; s.length();i++)&#123;<span class="hljs-comment">//对于每一个后缀的结尾</span><br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(j) != s.charAt(i))&#123;<span class="hljs-comment">//判断是否前后缀相等</span><br>            j = next[j - <span class="hljs-number">1</span>];<span class="hljs-comment">//不匹配则 j 回退</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(s.charAt(i)==s.charAt(j))&#123;<br>            j++;<br>        &#125;<br>        next[i] = j;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>    <span class="hljs-keyword">if</span>(needle.length()==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[needle.length()];<br>    getNext(next,needle);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; haystack.length(); i++) &#123;<br>        <span class="hljs-comment">//关键此处的 while和下面的if不能交换顺序！！</span><br>        <span class="hljs-comment">//反例如 父串 sads 子串 sad</span><br>        <span class="hljs-comment">//若是if(==)在前，当第一个匹配 s时，j++，此时i还没有++，所以在进行接下来的while时会进入while导致bug</span><br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(j) != haystack.charAt(i)) <span class="hljs-comment">//不匹配则查找不匹配字符的前一个位置的next值，进行回溯</span><br>            j = next[j - <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">if</span> (needle.charAt(j) == haystack.charAt(i)) <span class="hljs-comment">//匹配则两个指针同时后移，进行下一个的匹配</span><br>            j++;<br>        <span class="hljs-keyword">if</span> (j == needle.length()) <br>            <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<span class="hljs-comment">//返回子字符串在父字符串中的匹配位置</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反转字符串中的单词</title>
    <link href="/2023/09/24/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/09/24/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整体思路为：整体的字符反转，字符中额外空格的删除，字符单词反转</p><p>字符反转很简单，使用双指针即可<br>删除字符中的额外空格有点麻烦，可以使用双指针（参考之前的数组移除元素），具体思路如下：定义快慢指针，用快指针遍历数组，当快指针指向非目标值时，将快指针的内容拷贝到慢指针处，然后fast++，slow++。主要留心中间空格以及两端空格的处理。<br>字符单词反转不麻烦但是得考虑全。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>      <span class="hljs-type">char</span>[] sChars = s.toCharArray();<br>      <span class="hljs-comment">//字符串整体反转</span><br>      reverse(sChars,<span class="hljs-number">0</span>,sChars.length-<span class="hljs-number">1</span>);<br>      <span class="hljs-comment">//去除额外空格</span><br>      sChars = removeExtraSpace(sChars);<br>      <span class="hljs-comment">//单词内反转</span><br>      reverseEachWord(sChars);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(sChars);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseEachWord</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars)</span>&#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; end &lt;= chars.length; end++) &#123;<span class="hljs-comment">//便于让end总是指向每一个单词的末尾</span><br>          <span class="hljs-keyword">if</span>(end == chars.length || chars[end] == <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>              reverse(chars,start,end-<span class="hljs-number">1</span>);<br>              start = end + <span class="hljs-number">1</span>;<br>          &#125;<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">char</span>[] removeExtraSpace(<span class="hljs-type">char</span>[] chars)&#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; fast &lt; chars.length; fast++) &#123;<br>          <span class="hljs-keyword">if</span> (chars[fast] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<span class="hljs-comment">//整体为去除空格模板</span><br>              <span class="hljs-keyword">if</span> (slow != <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//在非首位的每个单词后面添加一个空格</span><br>                  chars[slow] = <span class="hljs-string">&#x27; &#x27;</span>;<br>                  slow ++;<br>              &#125;<br>              <span class="hljs-keyword">while</span>(fast &lt; chars.length &amp;&amp; chars[fast] !=<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                  <span class="hljs-comment">//删除所有空格</span><br>                  <span class="hljs-comment">//将快指针的内容（非空格的字母）赋值给慢指针</span><br>                  chars[slow] = chars[fast];<br>                  slow++;<br>                  fast++;<br>              &#125;<br>          &#125;<br>      &#125;<br>      <span class="hljs-comment">//同时slow也就是到达了最后的有效位置，slow的大小就是处理完后的数组大小。</span><br>      <span class="hljs-type">char</span>[] newChar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[slow];<br>      <span class="hljs-comment">//数组拷贝，System.arraycopy(拷贝数组, 起始索引, 新数组, 起始索引, 拷贝长度); </span><br>      System.arraycopy(chars, <span class="hljs-number">0</span>, newChar, <span class="hljs-number">0</span>, slow); <br>      <span class="hljs-keyword">return</span> newChar;<br>  &#125;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars,<span class="hljs-type">int</span> start ,<span class="hljs-type">int</span> end)</span>&#123;<br>      <span class="hljs-type">char</span> tmp;<br>      <span class="hljs-keyword">while</span>(start &lt; end)&#123;<br>          tmp = chars[start];<br>          chars[start] = chars[end];<br>          chars[end] = tmp;<br>          start ++;<br>          end --;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><style>  /* 只设置 markdown 字体 */  .markdown-body {    font-family: KaiTi,"Microsoft YaHei",Georgia, sans, serif;    font-size: 20px;  }</style>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
